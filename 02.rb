INPUT = 'DDDURLURURUDLDURRURULLRRDULRRLRLRURDLRRDUDRUDLRDUUDRRUDLLLURLUURLRURURLRLUDDURUULDURDRUUDLLDDDRLDUULLUDURRLUULUULDLDDULRLDLURURUULRURDULLLURLDRDULLULRRRLRLRULLULRULUUULRLLURURDLLRURRUUUDURRDLURUURDDLRRLUURLRRULURRDDRDULLLDRDDDDURURLLULDDULLRLDRLRRDLLURLRRUDDDRDLLRUDLLLLRLLRUDDLUUDRLRRRDRLRDLRRULRUUDUUDULLRLUDLLDDLLDLUDRURLULDLRDDLDRUDLDDLDDDRLLDUURRUUDLLULLRLDLUURRLLDRDLRRRRUUUURLUUUULRRUDDUDDRLDDURLRLRLLRRUDRDLRLDRRRRRRUDDURUUUUDDUDUDU
RLULUULRDDRLULRDDLRDUURLRUDDDUULUUUDDRDRRRLDUURDURDRLLLRDDRLURLDRRDLRLUURULUURDRRULRULDULDLRRDDRLDRUDUDDUDDRULURLULUDRDUDDDULRRRURLRRDLRDLDLLRLUULURLDRURRRLLURRRRRLLULRRRDDLRLDDUULDLLRDDRLLUUDRURLRULULRLRUULUUUUUDRURLURLDDUDDLRDDLDRRLDLURULUUDRDLULLURDLLLRRDRURUDDURRLURRDURURDLRUDRULUULLDRLRRDRLDDUDRDLLRURURLUDUURUULDURUDULRLRDLDURRLLDRDUDRUDDRLRURUDDLRRDLLLDULRRDRDRRRLURLDLURRDULDURUUUDURLDLRURRDRULLDDLLLRUULLLLURRRLLLDRRUDDDLURLRRRDRLRDLUUUDDRULLUULDURLDUUURUDRURUDRDLRRLDRURRLRDDLLLULUDDUULDURLRUDRDDD
RDDRUDLRLDDDRLRRLRRLUULDRLRUUURULRRLUURLLLRLULDDLDLRLULULUUDDDRLLLUDLLRUDURUDDLLDUDLURRULLRDLDURULRLDRLDLDRDDRUDRUULLLLRULULLLDDDULUUDUUDDLDRLRRDLRLURRLLDRLDLDLULRLRDLDLRLUULLDLULRRRDDRUULDUDLUUUUDUDRLUURDURRULLDRURUDURDUULRRULUULULRLDRLRLLRRRLULURLUDULLDRLDRDRULLUUUDLDUUUDLRDULRDDDDDDDDLLRDULLUDRDDRURUDDLURRUULUURURDUDLLRRRRDUDLURLLURURLRDLDUUDRURULRDURDLDRUDLRRLDLDULRRUDRDUUDRLURUURLDLUDLLRDDRDU
LLDDDDLUDLLDUDURRURLLLLRLRRLDULLURULDULDLDLLDRRDLUDRULLRUUURDRLLURDDLLUDDLRLLRDDLULRLDDRURLUDRDULLRUDDLUURULUUURURLRULRLDLDDLRDLDLLRUURDLUDRRRDDRDRLLUDDRLDRLLLRULRDLLRLRRDDLDRDDDUDUDLUULDLDUDDLRLDUULRULDLDULDDRRLUUURUUUDLRDRULDRRLLURRRDUDULDUDUDULLULLULULURLLRRLDULDULDLRDDRRLRDRLDRLUDLLLUULLRLLRLDRDDRUDDRLLDDLRULLLULRDDDLLLDRDLRULDDDLULURDULRLDRLULDDLRUDDUDLDDDUDRDRULULDDLDLRRDURLLRLLDDURRLRRULLURLRUDDLUURULULURLRUDLLLUDDURRLURLLRLLRRLDULRRUDURLLDDRLDLRRLULUULRRUURRRDULRLRLRDDRDULULUUDULLLLURULURRUDRLL
UULLULRUULUUUUDDRULLRLDDLRLDDLULURDDLULURDRULUURDLLUDDLDRLUDLLRUURRUDRLDRDDRRLLRULDLLRUUULLLDLDDULDRLRURLDRDUURLURDRUURUULURLRLRRURLDDDLLDDLDDDULRUDLURULLDDRLDLUDURLLLLLRULRRLLUDRUURLLURRLLRDRLLLRRDDDRRRDLRDRDUDDRLLRRDRLRLDDDLURUUUUULDULDRRRRLUDRLRDRUDUDDRULDULULDRUUDUULLUDULRLRRURDLDDUDDRDULLUURLDRDLDDUURULRDLUDDLDURUDRRRDUDRRDRLRLULDRDRLRLRRUDLLLDDDRURDRLRUDRRDDLDRRLRRDLUURLRDRRUDRRDLDDDLRDDLRDUUURRRUULLDDDLLRLDRRLLDDRLRRRLUDLRURULLDULLLUDLDLRLLDDRDRUDLRRDDLUU'

class BathroomLock
  def initialize(instructions)
    @instructions = instructions.split()

    @keypad1 = [
      [1, 2, 3],
      [4, 5, 6],
      [7, 8, 9]
    ]
    @keypad2 = [
      ['X', 'X', 1, 'X', 'X'],
      ['X', 2, 3, 4, 'X'],
      [5, 6, 7, 8, 9],
      ['X', 'A', 'B', 'C', 'X'],
      ['X', 'X', 'D', 'X', 'X']
    ]

    @pos = [0, 0] # row, col
  end

  def crack(version, starting_char)
    set_starting_pos!(version, starting_char)
    keypad = version == 1 ? @keypad1 : @keypad2
    sequence = []

    @instructions.each do |inst_line|
      inst_line.split('').each do |inst|
        case inst
        when 'U'
          @pos[0] -= 1 if (@pos[0] != 0) && (keypad[@pos[0] - 1][@pos[1]] != 'X')
        when 'R'
          @pos[1] += 1 if (@pos[1] != (keypad.first.count() - 1)) && (keypad[@pos[0]][@pos[1] + 1] != 'X')
        when 'D'
          @pos[0] += 1 if (@pos[0] != (keypad.count() - 1)) && (keypad[@pos[0] + 1][@pos[1]] != 'X')
        when 'L'
          @pos[1] -= 1 if (@pos[1] != 0) && (keypad[@pos[0]][@pos[1] - 1] != 'X')
        end
      end
      sequence << get_keypad_number(version)
    end

    sequence.join()
  end

  def set_starting_pos!(version, char)
    keypad = version == 1 ? @keypad1 : @keypad2
    @pos = [0,0]
    keypad.each do |row|
      row.each do |col|
        return if keypad[@pos[0]][@pos[1]].to_s == char
        @pos[1] += 1
      end
      @pos[1] = 0
      @pos[0] += 1
    end
  end

  def get_keypad_number(version)
    version == 1 ? @keypad1[@pos[0]][@pos[1]] : @keypad2[@pos[0]][@pos[1]]
  end
end

bl = BathroomLock.new(INPUT)
puts "The first bathroom code is #{bl.crack(1, '5')}"
puts "The second bathroom code is #{bl.crack(2, '5')}"
